'use client'
import {
  type HTMLAttributes,
  type ReactNode,
  forwardRef,
  useCallback,
  useRef,
} from 'react'

import { useShikiTheme } from '@/configs/shiki'
import { useClipboard } from '@/lib/hooks/use-clipboard'
import { cn } from '@/lib/utils'
import type { ScrollAreaViewportProps } from '@radix-ui/react-scroll-area'
import ShikiHighlighter from 'react-shiki'
import CopyButton from './copy-button'
import { ScrollArea, ScrollBar, ScrollViewport } from './primitives/scroll-area'

export type CodeBlockProps = HTMLAttributes<HTMLElement> & {
  /**
   * Title of the code block
   */
  title?: string

  /**
   * Language for syntax highlighting
   */
  lang?: string

  /**
   * Icon of code block
   *
   * When passed as a string, it assumes the value is the HTML of icon
   */
  icon?: ReactNode

  /**
   * Allow to copy code with copy button
   *
   * @defaultValue true
   */
  allowCopy?: boolean

  /**
   * Keep original background color generated by Shiki or Rehype Code
   *
   * @defaultValue false
   */
  keepBackground?: boolean

  viewportProps?: ScrollAreaViewportProps
}

export const Pre = forwardRef<HTMLPreElement, HTMLAttributes<HTMLPreElement>>(
  ({ className, ...props }, ref) => {
    return (
      <pre
        ref={ref}
        className={cn('p-4 focus-visible:outline-none', className)}
        {...props}
      >
        {props.children}
      </pre>
    )
  }
)

Pre.displayName = 'Pre'

export const CodeBlock = forwardRef<HTMLElement, CodeBlockProps>(
  (
    {
      title,
      lang = 'bash',
      allowCopy = true,
      keepBackground = false,
      icon,
      viewportProps,
      children,
      ...props
    },
    ref
  ) => {
    const [isCopied, copy] = useClipboard()
    const areaRef = useRef<HTMLDivElement>(null)
    const shikiTheme = useShikiTheme()

    const onCopy = useCallback(() => {
      const textContent = typeof children === 'string' ? children : ''
      copy(textContent)
    }, [copy, children])

    return (
      <figure
        ref={ref}
        {...props}
        className={cn(
          'not-prose group bg-bg-hover relative border p-2 text-xs',
          keepBackground &&
            'bg-[var(--shiki-light-bg)] dark:bg-[var(--shiki-dark-bg)]',
          props.className
        )}
      >
        {title ? (
          <div className="bg-bg-1 flex h-8 flex-row items-center gap-2 border-b px-3 py-1">
            {icon ? (
              <div
                className="text-fg-secondary [&_svg]:size-3"
                dangerouslySetInnerHTML={
                  typeof icon === 'string'
                    ? {
                        __html: icon,
                      }
                    : undefined
                }
              >
                {typeof icon !== 'string' ? icon : null}
              </div>
            ) : null}
            <figcaption className="text-fd-muted-foreground flex-1 truncate">
              {title}
            </figcaption>
            {allowCopy ? (
              <CopyButton
                className="-mr-2"
                value={typeof children === 'string' ? children : ''}
              />
            ) : null}
          </div>
        ) : (
          allowCopy && (
            <CopyButton
              className="absolute top-2 right-2 z-[2]"
              variant="ghost"
              size="slate"
              value={typeof children === 'string' ? children : ''}
            />
          )
        )}
        <ScrollArea ref={areaRef} dir="ltr">
          <ScrollViewport
            {...viewportProps}
            className={cn('max-h-[600px] max-w-full', viewportProps?.className)}
          >
            <ShikiHighlighter
              language={lang}
              theme={shikiTheme}
              className="text-xs [&_span]:!px-0"
              addDefaultStyles={false}
              showLanguage={false}
            >
              {typeof children === 'string' ? children : ''}
            </ShikiHighlighter>
          </ScrollViewport>
          <ScrollBar orientation="horizontal" />
          <ScrollBar orientation="vertical" />
        </ScrollArea>
      </figure>
    )
  }
)

CodeBlock.displayName = 'CodeBlock'
